#!/usr/bin/env python3

import logging
import subprocess
import sys
import pathlib
import tempfile
import textwrap
import json
import os
from typing import Dict, List, NewType
from pathlib import Path

PackageName = NewType('PackageName', str)
NixAttr = NewType('NixAttr', str)

def read_databases() -> Dict[PackageName, NixAttr]:
    if 'XDG_CONFIG_HOME' in os.environ:
        config = Path(os.environ['XDG_CONFIG_HOME'])
    else:
        config = Path.home() / '.config'
    databases = sorted((config / 'nix-pkgconfig').glob('*.json'))
    databases += os.environ.get('NIX_PKGCONFIG_DATABASES', '').split(':')

    pkgs = {}
    for db_file in databases:
        if db_file != '' and Path(db_file).exists():
            logging.debug(f'Reading {db_file}')
            pkgs.update(json.load(open(db_file)))
    return pkgs

def call_pkgconfig(attrs: List[NixAttr], args: List[str]) -> str:
    nixExpr = """
        let
          nixpkgs = import <nixpkgs> {{ }};
        in
        with nixpkgs; {{
          result = stdenv.mkDerivation {{
            name = "pkg-config-test";
            nativeBuildInputs = [ pkgconfig ];
            buildInputs = [ {attrs} ];
            buildCommand = ''
              mkdir -p $out
              pkg-config {args} > $out/out
            '';
          }};
        }}
    """.format(attrs=' '.join(attrs),
               args=' '.join(args))
    nixExpr = textwrap.dedent(nixExpr)

    with tempfile.NamedTemporaryFile('w') as f:
        f.write(nixExpr)
        f.flush()

        # Run pkg-config under nix
        cmd = ['nix', 'build', '-f', f.name, '--quiet', 'result']
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        (out, err) = p.communicate()
        if p.returncode != 0:
            sys.exit(p.returncode)

        # Read the result
        cmd = ['nix', 'eval', '-f', f.name, '--raw', 'result.outPath']
        out = pathlib.Path(subprocess.check_output(cmd).decode('UTF-8').strip())
        out = (out / "out").read_text()
        return out

def main() -> None:
    pkgs = read_databases()
    if '--list-all' in sys.argv:
        result = call_pkgconfig([], sys.argv[1:])
        print(result, end='')
        print('\n'.join('%s    placeholder from nix-pkgconfig' % pkg
                        for pkg in pkgs), end='')
    else:
        attrs = []
        pkg_names = [ arg
                      for arg in sys.argv[1:]
                      if not arg.startswith('-') ]

        for pkg_name in pkg_names:
            attr = pkgs.get(pkg_name)

            if attr is not None: 
                attrs.append(attr)
                logging.debug(f'package {pkg_name} -> {attr}')
            else:
                logging.warn(f'failed to find nix attribute for {pkg_name}')

        args = sys.argv[1:]
        result = call_pkgconfig(attrs, args)

        print(result, end='')

if __name__ == '__main__':
    main()
