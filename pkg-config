#!/usr/bin/env python

import subprocess
import sys
import pathlib
import tempfile
import textwrap

pkgs = {
    'libusb-1.0': 'libusb1.dev',
    'libpq': 'postgresql100',
    'zlib': 'zlib',
    'z': 'zlib'
}

def find_pkg_names(args):
    return [ arg
            for arg in args
            if not arg.startswith('-') ]

def call_pkgconfig(attrs, args):
    nixExpr = """
        let
          nixpkgs = import <nixpkgs> {{ }};
        in
        with nixpkgs; {{
          result = stdenv.mkDerivation {{
            name = "pkg-config-test";
            nativeBuildInputs = [ pkgconfig ];
            buildInputs = [ {attrs} ];
            buildCommand = ''
              mkdir -p $out
              pkg-config {args} > $out/out
            '';
          }};
        }}
    """.format(attrs=' '.join(attrs),
               args=' '.join(args))
    nixExpr = textwrap.dedent(nixExpr)

    with tempfile.NamedTemporaryFile('w') as f:
        f.write(nixExpr)
        f.flush()

        # Run pkg-config under nix
        cmd = ['nix', 'build', '-f', f.name, '--quiet', 'result']
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        (out, err) = p.communicate()
        if p.returncode != 0:
            sys.exit(p.returncode)

        # Read the result
        cmd = ['nix', 'eval', '-f', f.name, '--raw', 'result.outPath']
        out = pathlib.Path(subprocess.check_output(cmd).decode('UTF-8').strip())
        out = (out / "out").read_text()
        return out

def main():
    if '--list-all' in sys.argv:
        result = call_pkgconfig([], sys.argv[1:])
        print(result, end='')
        print('\n'.join('%s    placeholder from nix-pkgconfig' % pkg
                        for pkg in pkgs), end='')
    else:
        attrs = []
        for pkg_name in find_pkg_names(sys.argv[1:]):
            attr = pkgs.get(pkg_name)

            if attr is not None: 
                attrs.append(attr)
            else:
                print("failed to find nix attribute for %s" % pkg_name, file=sys.stderr)

        args = sys.argv[1:]
        result = call_pkgconfig(attrs, args)

        print(result, end='')

if __name__ == '__main__':
    main()
