#!/usr/bin/env python3

import json
import logging
import os
import pathlib
import subprocess
import sys
import tempfile
import textwrap
from pathlib import Path
from time import time
from typing import NewType

PackageName = NewType("PackageName", str)
NixAttr = NewType("NixAttr", str)


def find_databases() -> set[Path]:
    if "NIX_PKGCONFIG_DATABASES" in os.environ:
        return os.environ["NIX_PKGCONFIG_DATABASES"].split(":")
    else:
        if "XDG_CONFIG_HOME" in os.environ:
            config = Path(os.environ["XDG_CONFIG_HOME"])
        else:
            config = Path.home() / ".config"
        return sorted((config / "nix-pkgconfig").glob("*.json"))


def read_databases(databases: set[Path]) -> dict[PackageName, NixAttr]:
    pkgs = {}
    for db_file in databases:
        if db_file != "" and Path(db_file).exists():
            logging.debug(f"Reading {db_file}")
            pkgs.update(json.load(open(db_file)))
    return pkgs


def find_nixpkgs() -> str:
    if "NIX_PKGCONFIG_NIXPKGS_PATH" in os.environ:
        return os.environ["NIX_PKGCONFIG_NIXPKGS_PATH"]
    else:
        return "<nixpkgs>"


def call_pkgconfig(attrs: list[NixAttr], args: list[str]) -> str:
    nixpkgs = find_nixpkgs()
    nixExpr = """
        let
          nixpkgs = import {nixpkgs} {{ }};
        in
        with nixpkgs; {{
          result = stdenv.mkDerivation {{
            name = "pkg-config-test";
            nativeBuildInputs = [ pkg-config ];
            buildInputs = [ {attrs} ];
            buildCommand = ''
              mkdir -p $out
              pkg-config {args} > $out/out
            '';
          }};
        }}
    """.format(attrs=" ".join(attrs), args=" ".join(args), nixpkgs=nixpkgs)
    nixExpr = textwrap.dedent(nixExpr)

    with tempfile.NamedTemporaryFile("w") as f:
        _ = f.write(nixExpr)
        f.flush()

        # Build the attribute and register roots
        root_dir = Path.cwd() / ".nix-pkgconfig" / "roots"
        root_dir.mkdir(parents=True, exist_ok=True)
        link = root_dir / f"result-{time()}"
        if len(attrs) > 0:
            args = ["nix", "build", "-f", nixpkgs, "-o", link] + attrs
            _ = subprocess.check_output(args)

        # Run pkg-config under nix
        cmd = ["nix", "build", "-f", f.name, "--quiet", "--no-link", "result"]
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        (out, _) = p.communicate()
        if p.returncode != 0:
            sys.exit(p.returncode)

        # Read the result
        cmd = ["nix", "eval", "-f", f.name, "--raw", "result.outPath"]
        out = pathlib.Path(subprocess.check_output(cmd).decode("UTF-8").strip())
        out = (out / "out").read_text()
        return out


def main() -> None:
    dbs = find_databases()
    pkgs = read_databases(dbs)
    if "--list-all" in sys.argv:
        result = call_pkgconfig([], sys.argv[1:])
        print(result, end="")
        print(
            "\n".join("%s    placeholder from nix-pkgconfig" % pkg for pkg in pkgs),
            end="",
        )
    else:
        attrs = []
        pkg_names = [arg for arg in sys.argv[1:] if not arg.startswith("-")]

        for pkg_name in pkg_names:
            attr = pkgs.get(pkg_name)

            if attr is not None:
                attrs.append(attr)
                logging.debug(f"package {pkg_name} -> {attr}")
            else:
                logging.warning(f"failed to find nix attribute for {pkg_name}")

        args = sys.argv[1:]
        result = call_pkgconfig(attrs, args)

        print(result, end="")


if __name__ == "__main__":
    main()
